services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-prod_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d prod_db"]
      interval: 10s
      timeout: 10s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - pipeline_net
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  airflow-init:
    build: ./airflow
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-prod_db}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
    command: ["bash", "-c", "airflow db init && (airflow users list | grep -q admin || airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com)"]
    restart: on-failure
    networks:
      - pipeline_net
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  airflow-webserver:
    build: ./airflow
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-prod_db}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ../dags:/opt/airflow/dags
    ports:
      - "8080:8080"
    command: ["airflow", "webserver"]
    restart: always
    networks:
      - pipeline_net
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  airflow-scheduler:
    build: ./airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-prod_db}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ../dags:/opt/airflow/dags
    command: ["airflow", "scheduler"]
    restart: always
    networks:
      - pipeline_net
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  spark:
    build: ./spark
    volumes:
      - ../spark_jobs:/opt/spark_jobs
    command: ["/opt/spark/bin/spark-class", "org.apache.spark.deploy.master.Master"]
    ports:
      - "7077:7077"
      - "8081:8080"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pipeline_net
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
  airflow_dags:

networks:
  pipeline_net:
    name: pipeline_net